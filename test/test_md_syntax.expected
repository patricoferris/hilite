<p>Syntax highlighting work!</p>
<pre><code><span class='ocaml-comment-block'>(*</span><span class='ocaml-comment-block'>
</span><span class='ocaml-comment-block'> * Copyright (c) 2014 Leo White &lt;lpw25@cl.cam.ac.uk&gt;
</span><span class='ocaml-comment-block'> *
</span><span class='ocaml-comment-block'> * Permission to use, copy, modify, and distribute this software for any
</span><span class='ocaml-comment-block'> * purpose with or without fee is hereby granted, provided that the above
</span><span class='ocaml-comment-block'> * copyright notice and this permission notice appear in all copies.
</span><span class='ocaml-comment-block'> *
</span><span class='ocaml-comment-block'> * THE SOFTWARE IS PROVIDED </span><span class='ocaml-comment-block'>&quot;</span><span class='ocaml-comment-block'>AS IS</span><span class='ocaml-comment-block'>&quot;</span><span class='ocaml-comment-block'> AND THE AUTHOR DISCLAIMS ALL WARRANTIES
</span><span class='ocaml-comment-block'> * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
</span><span class='ocaml-comment-block'> * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
</span><span class='ocaml-comment-block'> * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
</span><span class='ocaml-comment-block'> * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
</span><span class='ocaml-comment-block'> * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
</span><span class='ocaml-comment-block'> * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
</span><span class='ocaml-comment-block'> </span><span class='ocaml-comment-block'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>open</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Paths</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>module</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Locations</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>struct</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-source'>uid</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-support-type'>string</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-source'>{</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>source_parent</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Identifier</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-constant-language-capital-identifier'>Module</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>        </span><span class='ocaml-comment-doc'>(**</span><span class='ocaml-comment-doc'> Correspond to where the source code is stored. Might be different from the root component of the identifier inside expansions. </span><span class='ocaml-comment-doc'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>impl</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-source'>uid</span><span class='ocaml-source'> </span><span class='ocaml-source'>option</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>        </span><span class='ocaml-comment-doc'>(**</span><span class='ocaml-comment-doc'> Location of the definition in the implementation file. </span><span class='ocaml-comment-doc'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>intf</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Location_</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>span</span><span class='ocaml-source'> </span><span class='ocaml-source'>option</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>        </span><span class='ocaml-comment-doc'>(**</span><span class='ocaml-comment-doc'> Location of the declaration in the interface file. </span><span class='ocaml-comment-doc'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-source'>}</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>module</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Source_code</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>struct</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>module</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Info</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>struct</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-source'>jmp_to_def</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Occurence</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Locations</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>uid</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Def</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-support-type'>string</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-source'>syntax</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-support-type'>string</span><span class='ocaml-source'> </span><span class='ocaml-source'>list</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-comment-block'>(*</span><span class='ocaml-comment-block'> type syntax = </span><span class='ocaml-comment-block'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-comment-block'>(*</span><span class='ocaml-comment-block'>   | Keyword </span><span class='ocaml-comment-block'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-comment-block'>(*</span><span class='ocaml-comment-block'>   | Keyword_other </span><span class='ocaml-comment-block'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-comment-block'>(*</span><span class='ocaml-comment-block'>   | Comment </span><span class='ocaml-comment-block'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-comment-block'>(*</span><span class='ocaml-comment-block'>   | Language_constant </span><span class='ocaml-comment-block'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-comment-block'>(*</span><span class='ocaml-comment-block'>   | Numeric_constant </span><span class='ocaml-comment-block'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-comment-block'>(*</span><span class='ocaml-comment-block'>   | Boolean_constant </span><span class='ocaml-comment-block'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-comment-block'>(*</span><span class='ocaml-comment-block'>   | Docstring </span><span class='ocaml-comment-block'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-comment-block'>(*</span><span class='ocaml-comment-block'>   | String_constant </span><span class='ocaml-comment-block'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-comment-block'>(*</span><span class='ocaml-comment-block'>   | Alert </span><span class='ocaml-comment-block'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-source'>info</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Syntax</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-source'>syntax</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Line</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-support-type'>int</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Local_jmp</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-source'>jmp_to_def</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-storage-type'>'a</span><span class='ocaml-source'> </span><span class='ocaml-source'>with_pos</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-storage-type'>'a</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>*</span><span class='ocaml-source'> </span><span class='ocaml-source'>(</span><span class='ocaml-support-type'>int</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>*</span><span class='ocaml-source'> </span><span class='ocaml-support-type'>int</span><span class='ocaml-source'>)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-source'>infos</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-source'>info</span><span class='ocaml-source'> </span><span class='ocaml-source'>with_pos</span><span class='ocaml-source'> </span><span class='ocaml-source'>list</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-source'>{</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>parent</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Identifier</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-constant-language-capital-identifier'>Module</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>intf_source</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-support-type'>string</span><span class='ocaml-source'> </span><span class='ocaml-source'>option</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>impl_source</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-support-type'>string</span><span class='ocaml-source'> </span><span class='ocaml-source'>option</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>impl_info</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Info</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>infos</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-source'>}</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-comment-doc'>(**</span><span class='ocaml-comment-doc'> {3 Modules} </span><span class='ocaml-comment-doc'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>module</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>rec</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Module</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>decl</span><span class='ocaml-source'> =
</span><span class='ocaml-source'>    | Alias </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> (Path.Module.t * ModuleType.named_expansion option)
</span><span class='ocaml-source'>    | ModuleType </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> ModuleType.expr
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = {
</span><span class='ocaml-source'>    id : Identifier.Module.t;
</span><span class='ocaml-source'>    locs : Locations.t option;
</span><span class='ocaml-source'>        (** Locations might not be set when the </span><span class='ocaml-keyword-other-ocaml'>module</span><span class='ocaml-source'> is artificially constructed from a </span><span class='ocaml-keyword-other-ocaml'>functor</span><span class='ocaml-source'> argument. *)
</span><span class='ocaml-source'>    doc : Comment.docs;
</span><span class='ocaml-source'>    type_ : decl;
</span><span class='ocaml-source'>    canonical : Path.Module.t option;
</span><span class='ocaml-source'>    hidden : bool;
</span><span class='ocaml-source'>  }
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other-ocaml'>module</span><span class='ocaml-source'> Equation : </span><span class='ocaml-keyword-other-ocaml'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = decl
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-constant-language-capital-identifier'>Module</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>and</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>FunctorParameter</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>parameter</span><span class='ocaml-source'> = {
</span><span class='ocaml-source'>    id : Identifier.FunctorParameter.t;
</span><span class='ocaml-source'>    expr : ModuleType.expr;
</span><span class='ocaml-source'>  }
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = Unit | Named </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> parameter
</span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-constant-language-capital-identifier'>FunctorParameter</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-comment-doc'>(**</span><span class='ocaml-comment-doc'> {3 Modules Types} </span><span class='ocaml-comment-doc'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>and</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>ModuleType</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>substitution</span><span class='ocaml-source'> =
</span><span class='ocaml-source'>    | ModuleEq </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> Fragment.Module.t * Module.Equation.t
</span><span class='ocaml-source'>    | ModuleTypeEq </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> Fragment.ModuleType.t * ModuleType.expr
</span><span class='ocaml-source'>    | TypeEq </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> Fragment.Type.t * TypeDecl.Equation.t
</span><span class='ocaml-source'>    | ModuleSubst </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> Fragment.Module.t * Path.Module.t
</span><span class='ocaml-source'>    | ModuleTypeSubst </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> Fragment.ModuleType.t * ModuleType.expr
</span><span class='ocaml-source'>    | TypeSubst </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> Fragment.Type.t * TypeDecl.Equation.t
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>type_of_desc</span><span class='ocaml-source'> =
</span><span class='ocaml-source'>    | ModPath </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> Path.Module.t
</span><span class='ocaml-source'>    | StructInclude </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> Path.Module.t
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>simple_expansion</span><span class='ocaml-source'> =
</span><span class='ocaml-source'>    | Signature </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> Signature.t
</span><span class='ocaml-source'>    | Functor </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> FunctorParameter.t * simple_expansion
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>named_expansion</span><span class='ocaml-source'> = {
</span><span class='ocaml-source'>    e_id : Identifier.Path.Module.t;
</span><span class='ocaml-source'>    e_expansion : simple_expansion;
</span><span class='ocaml-source'>  }
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>typeof_t</span><span class='ocaml-source'> = {
</span><span class='ocaml-source'>    t_desc : type_of_desc;
</span><span class='ocaml-source'>    t_expansion : simple_expansion option;
</span><span class='ocaml-source'>  }
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other-ocaml'>module</span><span class='ocaml-source'> U : </span><span class='ocaml-keyword-other-ocaml'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>expr</span><span class='ocaml-source'> =
</span><span class='ocaml-source'>      | Path </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> Path.ModuleType.t
</span><span class='ocaml-source'>      | Signature </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> Signature.t
</span><span class='ocaml-source'>      | With </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> substitution list * expr
</span><span class='ocaml-source'>      | TypeOf </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> typeof_t
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    (* Nb. this may have an expansion! *)
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-source'>path_t</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-source'>{</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>p_expansion</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-source'>simple_expansion</span><span class='ocaml-source'> </span><span class='ocaml-source'>option</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>p_path</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Path</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-constant-language-capital-identifier'>ModuleType</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-source'>}</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-source'>with_t</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-source'>{</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>w_substitutions</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-source'>substitution</span><span class='ocaml-source'> </span><span class='ocaml-source'>list</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>w_expansion</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-source'>simple_expansion</span><span class='ocaml-source'> </span><span class='ocaml-source'>option</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>w_expr</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>U</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>expr</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-source'>}</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-source'>expr</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Path</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-source'>path_t</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Signature</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Signature</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Functor</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>FunctorParameter</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>*</span><span class='ocaml-source'> </span><span class='ocaml-source'>expr</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>With</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-source'>with_t</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>TypeOf</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-source'>typeof_t</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-source'>{</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>id</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Identifier</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-constant-language-capital-identifier'>ModuleType</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>locs</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Locations</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-source'>option</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>        </span><span class='ocaml-comment-doc'>(**</span><span class='ocaml-comment-doc'> Can be [None] for module types created by a type substitution. </span><span class='ocaml-comment-doc'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>doc</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Comment</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>docs</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>canonical</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Path</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-constant-language-capital-identifier'>ModuleType</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-source'>option</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>expr</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-source'>expr</span><span class='ocaml-source'> </span><span class='ocaml-source'>option</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-source'>}</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-constant-language-capital-identifier'>ModuleType</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>and</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>ModuleSubstitution</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = {
</span><span class='ocaml-source'>    id : Identifier.Module.t;
</span><span class='ocaml-source'>    doc : Comment.docs;
</span><span class='ocaml-source'>    manifest : Path.Module.t;
</span><span class='ocaml-source'>  }
</span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-constant-language-capital-identifier'>ModuleSubstitution</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>and</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>ModuleTypeSubstitution</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = {
</span><span class='ocaml-source'>    id : Identifier.ModuleType.t;
</span><span class='ocaml-source'>    doc : Comment.docs;
</span><span class='ocaml-source'>    manifest : ModuleType.expr;
</span><span class='ocaml-source'>  }
</span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-constant-language-capital-identifier'>ModuleTypeSubstitution</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-comment-doc'>(**</span><span class='ocaml-comment-doc'> {3 Signatures} </span><span class='ocaml-comment-doc'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>and</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Signature</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>recursive</span><span class='ocaml-source'> = Ordinary | And | Nonrec | Rec
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>item</span><span class='ocaml-source'> =
</span><span class='ocaml-source'>    | Module </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> recursive * Module.t
</span><span class='ocaml-source'>    | ModuleType </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> ModuleType.t
</span><span class='ocaml-source'>    | ModuleSubstitution </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> ModuleSubstitution.t
</span><span class='ocaml-source'>    | ModuleTypeSubstitution </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> ModuleTypeSubstitution.t
</span><span class='ocaml-source'>    | Open </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> Open.t
</span><span class='ocaml-source'>    | Type </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> recursive * TypeDecl.t
</span><span class='ocaml-source'>    | TypeSubstitution </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> TypeDecl.t
</span><span class='ocaml-source'>    | TypExt </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> Extension.t
</span><span class='ocaml-source'>    | Exception </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> Exception.t
</span><span class='ocaml-source'>    | Value </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> Value.t
</span><span class='ocaml-source'>    | Class </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> recursive * Class.t
</span><span class='ocaml-source'>    | ClassType </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> recursive * ClassType.t
</span><span class='ocaml-source'>    | Include </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> Include.t
</span><span class='ocaml-source'>    | Comment </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> Comment.docs_or_stop
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = {
</span><span class='ocaml-source'>    items : item list;
</span><span class='ocaml-source'>    compiled : bool;
</span><span class='ocaml-source'>    doc : Comment.docs;  (** The top comment. *)
</span><span class='ocaml-source'>  }
</span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-constant-language-capital-identifier'>Signature</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>and</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Open</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = { expansion : Signature.t; doc : Comment.docs }
</span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-constant-language-capital-identifier'>Open</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-comment-doc'>(**</span><span class='ocaml-comment-doc'> {3 Includes} </span><span class='ocaml-comment-doc'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>and</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Include</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>shadowed</span><span class='ocaml-source'> = {
</span><span class='ocaml-source'>    s_modules : string list;
</span><span class='ocaml-source'>    s_module_types : string list;
</span><span class='ocaml-source'>    s_values : string list;
</span><span class='ocaml-source'>    s_types : string list;
</span><span class='ocaml-source'>    s_classes : string list;
</span><span class='ocaml-source'>    s_class_types : string list;
</span><span class='ocaml-source'>  }
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>expansion</span><span class='ocaml-source'> = { shadowed : shadowed; content : Signature.t }
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  (* Explicitly unexpanded decl *)
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>decl</span><span class='ocaml-source'> = Alias </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> Path.Module.t | ModuleType </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> ModuleType.U.expr
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = {
</span><span class='ocaml-source'>    loc : Location_.span;
</span><span class='ocaml-source'>    parent : Identifier.Signature.t;
</span><span class='ocaml-source'>    strengthened : Path.Module.t option;
</span><span class='ocaml-source'>    doc : Comment.docs;
</span><span class='ocaml-source'>    status : [ `Inline | `Closed | `Open | `Default ];
</span><span class='ocaml-source'>    decl : decl;
</span><span class='ocaml-source'>    expansion : expansion;
</span><span class='ocaml-source'>  }
</span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-constant-language-capital-identifier'>Include</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-comment-doc'>(**</span><span class='ocaml-comment-doc'> {3 Type Declarations} </span><span class='ocaml-comment-doc'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>and</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>TypeDecl</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other-ocaml'>module</span><span class='ocaml-source'> Field : </span><span class='ocaml-keyword-other-ocaml'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = {
</span><span class='ocaml-source'>      id : Identifier.Field.t;
</span><span class='ocaml-source'>      doc : Comment.docs;
</span><span class='ocaml-source'>      mutable_ : bool;
</span><span class='ocaml-source'>      type_ : TypeExpr.t;
</span><span class='ocaml-source'>    }
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>module</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Constructor</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>argument</span><span class='ocaml-source'> = Tuple </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> TypeExpr.t list | Record </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> Field.t list
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = {
</span><span class='ocaml-source'>      id : Identifier.Constructor.t;
</span><span class='ocaml-source'>      doc : Comment.docs;
</span><span class='ocaml-source'>      args : argument;
</span><span class='ocaml-source'>      res : TypeExpr.t option;
</span><span class='ocaml-source'>    }
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>module</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Representation</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> =
</span><span class='ocaml-source'>      | Variant </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> Constructor.t list
</span><span class='ocaml-source'>      | Record </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> Field.t list
</span><span class='ocaml-source'>      | Extensible
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-source'>variance</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Pos</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Neg</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-source'>param_desc</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Any</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Var</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-support-type'>string</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-source'>param</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-source'>{</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>desc</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-source'>param_desc</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>variance</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-source'>variance</span><span class='ocaml-source'> </span><span class='ocaml-source'>option</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>injectivity</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-support-type'>bool</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-source'>}</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>module</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Equation</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = {
</span><span class='ocaml-source'>      params : param list;
</span><span class='ocaml-source'>      private_ : bool;
</span><span class='ocaml-source'>      manifest : TypeExpr.t option;
</span><span class='ocaml-source'>      constraints : (TypeExpr.t * TypeExpr.t) list;
</span><span class='ocaml-source'>    }
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-source'>{</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>id</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Identifier</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-constant-language-capital-identifier'>Type</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>locs</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Locations</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>doc</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Comment</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>docs</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>canonical</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Path</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-constant-language-capital-identifier'>Type</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-source'>option</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>equation</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Equation</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>representation</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Representation</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-source'>option</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-source'>}</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-constant-language-capital-identifier'>TypeDecl</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-comment-doc'>(**</span><span class='ocaml-comment-doc'> {3 Type extensions} </span><span class='ocaml-comment-doc'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>and</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Extension</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other-ocaml'>module</span><span class='ocaml-source'> Constructor : </span><span class='ocaml-keyword-other-ocaml'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = {
</span><span class='ocaml-source'>      id : Identifier.Extension.t;
</span><span class='ocaml-source'>      locs : Locations.t;
</span><span class='ocaml-source'>      doc : Comment.docs;
</span><span class='ocaml-source'>      args : TypeDecl.Constructor.argument;
</span><span class='ocaml-source'>      res : TypeExpr.t option;
</span><span class='ocaml-source'>    }
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-source'>{</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>parent</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Identifier</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-constant-language-capital-identifier'>Signature</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>type_path</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Path</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-constant-language-capital-identifier'>Type</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>doc</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Comment</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>docs</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>type_params</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>TypeDecl</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>param</span><span class='ocaml-source'> </span><span class='ocaml-source'>list</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>private_</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-support-type'>bool</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>constructors</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Constructor</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-source'>list</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-source'>}</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-constant-language-capital-identifier'>Extension</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-comment-doc'>(**</span><span class='ocaml-comment-doc'> {3 Exception} </span><span class='ocaml-comment-doc'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>and</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Exception</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = {
</span><span class='ocaml-source'>    id : Identifier.Exception.t;
</span><span class='ocaml-source'>    locs : Locations.t;
</span><span class='ocaml-source'>    doc : Comment.docs;
</span><span class='ocaml-source'>    args : TypeDecl.Constructor.argument;
</span><span class='ocaml-source'>    res : TypeExpr.t option;
</span><span class='ocaml-source'>  }
</span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-constant-language-capital-identifier'>Exception</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-comment-doc'>(**</span><span class='ocaml-comment-doc'> {3 Values} </span><span class='ocaml-comment-doc'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>and</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Value</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>value</span><span class='ocaml-source'> = Abstract | External </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> string list
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = {
</span><span class='ocaml-source'>    id : Identifier.Value.t;
</span><span class='ocaml-source'>    locs : Locations.t;
</span><span class='ocaml-source'>    value : value;
</span><span class='ocaml-source'>    doc : Comment.docs;
</span><span class='ocaml-source'>    type_ : TypeExpr.t;
</span><span class='ocaml-source'>  }
</span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-constant-language-capital-identifier'>Value</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-comment-doc'>(**</span><span class='ocaml-comment-doc'> {3 Classes} </span><span class='ocaml-comment-doc'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>and</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Class</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>decl</span><span class='ocaml-source'> =
</span><span class='ocaml-source'>    | ClassType </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> ClassType.expr
</span><span class='ocaml-source'>    | Arrow </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> TypeExpr.label option * TypeExpr.t * decl
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = {
</span><span class='ocaml-source'>    id : Identifier.Class.t;
</span><span class='ocaml-source'>    locs : Locations.t;
</span><span class='ocaml-source'>    doc : Comment.docs;
</span><span class='ocaml-source'>    virtual_ : bool;
</span><span class='ocaml-source'>    params : TypeDecl.param list;
</span><span class='ocaml-source'>    type_ : decl;
</span><span class='ocaml-source'>    expansion : ClassSignature.t option;
</span><span class='ocaml-source'>  }
</span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-constant-language-capital-identifier'>Class</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-comment-doc'>(**</span><span class='ocaml-comment-doc'> {3 Class Types} </span><span class='ocaml-comment-doc'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>and</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>ClassType</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>expr</span><span class='ocaml-source'> =
</span><span class='ocaml-source'>    | Constr </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> Path.ClassType.t * TypeExpr.t list
</span><span class='ocaml-source'>    | Signature </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> ClassSignature.t
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = {
</span><span class='ocaml-source'>    id : Identifier.ClassType.t;
</span><span class='ocaml-source'>    locs : Locations.t;
</span><span class='ocaml-source'>    doc : Comment.docs;
</span><span class='ocaml-source'>    virtual_ : bool;
</span><span class='ocaml-source'>    params : TypeDecl.param list;
</span><span class='ocaml-source'>    expr : expr;
</span><span class='ocaml-source'>    expansion : ClassSignature.t option;
</span><span class='ocaml-source'>  }
</span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-constant-language-capital-identifier'>ClassType</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-comment-doc'>(**</span><span class='ocaml-comment-doc'> {3 Class Signatures} </span><span class='ocaml-comment-doc'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>and</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>ClassSignature</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other-ocaml'>module</span><span class='ocaml-source'> Constraint : </span><span class='ocaml-keyword-other-ocaml'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = { left : TypeExpr.t; right : TypeExpr.t; doc : Comment.docs }
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>module</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Inherit</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = { expr : ClassType.expr; doc : Comment.docs }
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-source'>item</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Method</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Method</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>InstanceVariable</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>InstanceVariable</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Constraint</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Constraint</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Inherit</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Inherit</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Comment</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Comment</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>docs_or_stop</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-source'>{</span><span class='ocaml-source'> </span><span class='ocaml-source'>self</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>TypeExpr</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-source'>option</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'> </span><span class='ocaml-source'>items</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-source'>item</span><span class='ocaml-source'> </span><span class='ocaml-source'>list</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'> </span><span class='ocaml-source'>doc</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Comment</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>docs</span><span class='ocaml-source'> </span><span class='ocaml-source'>}</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-constant-language-capital-identifier'>ClassSignature</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-comment-doc'>(**</span><span class='ocaml-comment-doc'> {3 Methods} </span><span class='ocaml-comment-doc'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>and</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Method</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = {
</span><span class='ocaml-source'>    id : Identifier.Method.t;
</span><span class='ocaml-source'>    doc : Comment.docs;
</span><span class='ocaml-source'>    private_ : bool;
</span><span class='ocaml-source'>    virtual_ : bool;
</span><span class='ocaml-source'>    type_ : TypeExpr.t;
</span><span class='ocaml-source'>  }
</span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-constant-language-capital-identifier'>Method</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-comment-doc'>(**</span><span class='ocaml-comment-doc'> {3 Instance variables} </span><span class='ocaml-comment-doc'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>and</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>InstanceVariable</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = {
</span><span class='ocaml-source'>    id : Identifier.InstanceVariable.t;
</span><span class='ocaml-source'>    doc : Comment.docs;
</span><span class='ocaml-source'>    mutable_ : bool;
</span><span class='ocaml-source'>    virtual_ : bool;
</span><span class='ocaml-source'>    type_ : TypeExpr.t;
</span><span class='ocaml-source'>  }
</span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-constant-language-capital-identifier'>InstanceVariable</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-comment-doc'>(**</span><span class='ocaml-comment-doc'> {3 Type expressions} </span><span class='ocaml-comment-doc'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>and</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>TypeExpr</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other-ocaml'>module</span><span class='ocaml-source'> Polymorphic_variant : </span><span class='ocaml-keyword-other-ocaml'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>kind</span><span class='ocaml-source'> = Fixed | Closed </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> string list | Open
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other-ocaml'>module</span><span class='ocaml-source'> Constructor : </span><span class='ocaml-keyword-other-ocaml'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>      </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = {
</span><span class='ocaml-source'>        name : string;
</span><span class='ocaml-source'>        constant : bool;
</span><span class='ocaml-source'>        arguments : TypeExpr.t list;
</span><span class='ocaml-source'>        doc : Comment.docs;
</span><span class='ocaml-source'>      }
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-source'>element</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Type</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>TypeExpr</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Constructor</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Constructor</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-source'>{</span><span class='ocaml-source'> </span><span class='ocaml-source'>kind</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-source'>kind</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'> </span><span class='ocaml-source'>elements</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-source'>element</span><span class='ocaml-source'> </span><span class='ocaml-source'>list</span><span class='ocaml-source'> </span><span class='ocaml-source'>}</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>module</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Object</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>method_</span><span class='ocaml-source'> = { name : string; type_ : TypeExpr.t }
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>field</span><span class='ocaml-source'> = Method </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> method_ | Inherit </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> TypeExpr.t
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = { fields : field list; open_ : bool }
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>module</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Package</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>substitution</span><span class='ocaml-source'> = Fragment.Type.t * TypeExpr.t
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = { path : Path.ModuleType.t; substitutions : substitution list }
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-source'>label</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Label</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-support-type'>string</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Optional</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-support-type'>string</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Var</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-support-type'>string</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Any</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Alias</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>*</span><span class='ocaml-source'> </span><span class='ocaml-support-type'>string</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Arrow</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-source'>label</span><span class='ocaml-source'> </span><span class='ocaml-source'>option</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>*</span><span class='ocaml-source'> </span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>*</span><span class='ocaml-source'> </span><span class='ocaml-source'>t</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Tuple</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-source'>list</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Constr</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Path</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-constant-language-capital-identifier'>Type</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>*</span><span class='ocaml-source'> </span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-source'>list</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Polymorphic_variant</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>TypeExpr</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-constant-language-capital-identifier'>Polymorphic_variant</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Object</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>TypeExpr</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-constant-language-capital-identifier'>Object</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Class</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Path</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-constant-language-capital-identifier'>ClassType</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>*</span><span class='ocaml-source'> </span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-source'>list</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Poly</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-support-type'>string</span><span class='ocaml-source'> </span><span class='ocaml-source'>list</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>*</span><span class='ocaml-source'> </span><span class='ocaml-source'>t</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Package</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>TypeExpr</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-constant-language-capital-identifier'>Package</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-constant-language-capital-identifier'>TypeExpr</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-comment-doc'>(**</span><span class='ocaml-comment-doc'> {3 Compilation units} </span><span class='ocaml-comment-doc'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>module</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>rec</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Compilation_unit</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other-ocaml'>module</span><span class='ocaml-source'> Import : </span><span class='ocaml-keyword-other-ocaml'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> =
</span><span class='ocaml-source'>      | Unresolved </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> string * Digest.t option
</span><span class='ocaml-source'>      | Resolved </span><span class='ocaml-keyword-other-ocaml'>of</span><span class='ocaml-source'> Root.t * Names.ModuleName.t
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>module</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Source</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = { file : string; build_dir : string; digest : Digest.t }
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>module</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Packed</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>item</span><span class='ocaml-source'> = { id : Identifier.Module.t; path : Path.Module.t }
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = item list
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-source'>content</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Module</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Signature</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Pack</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>of</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Packed</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>type</span><span class='ocaml-source'> </span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-source'>{</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>id</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Identifier</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-constant-language-capital-identifier'>RootModule</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>root</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Root</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>digest</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Digest</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>imports</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Import</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-source'>list</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>source</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Source</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-source'>option</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>interface</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-support-type'>bool</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>hidden</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-support-type'>bool</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>content</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-source'>content</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>expansion</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Signature</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-source'>option</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>linked</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-support-type'>bool</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>  </span><span class='ocaml-comment-doc'>(**</span><span class='ocaml-comment-doc'> Whether this unit has been linked. </span><span class='ocaml-comment-doc'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>canonical</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Path</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-constant-language-capital-identifier'>Module</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-source'>option</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>    </span><span class='ocaml-source'>sources</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Source_code</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-source'>list</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-source'>}</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-constant-language-capital-identifier'>Compilation_unit</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-keyword-other'>module</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>rec</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Page</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>sig</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword'>type</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>t</span><span class='ocaml-source'> = {
</span><span class='ocaml-source'>    name : Identifier.Page.t;
</span><span class='ocaml-source'>    root : Root.t;
</span><span class='ocaml-source'>    content : Comment.docs;
</span><span class='ocaml-source'>    children : Reference.t list;
</span><span class='ocaml-source'>    digest : Digest.t;
</span><span class='ocaml-source'>    linked : bool;
</span><span class='ocaml-source'>  }
</span><span class='ocaml-keyword-other'>end</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-constant-language-capital-identifier'>Page</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-keyword'>let</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>umty_of_mty</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>ModuleType</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>expr</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>-&gt;</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>ModuleType</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-constant-language-capital-identifier'>U</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>expr</span><span class='ocaml-source'> </span><span class='ocaml-source'>option</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>function</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Signature</span><span class='ocaml-source'> </span><span class='ocaml-source'>sg</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>-&gt;</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Some</span><span class='ocaml-source'> </span><span class='ocaml-source'>(</span><span class='ocaml-constant-language-capital-identifier'>Signature</span><span class='ocaml-source'> </span><span class='ocaml-source'>sg</span><span class='ocaml-source'>)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Path</span><span class='ocaml-source'> </span><span class='ocaml-source'>{</span><span class='ocaml-source'> </span><span class='ocaml-source'>p_path</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'> </span><span class='ocaml-constant-language'>_</span><span class='ocaml-source'> </span><span class='ocaml-source'>}</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>-&gt;</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Some</span><span class='ocaml-source'> </span><span class='ocaml-source'>(</span><span class='ocaml-constant-language-capital-identifier'>Path</span><span class='ocaml-source'> </span><span class='ocaml-source'>p_path</span><span class='ocaml-source'>)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Functor</span><span class='ocaml-source'> </span><span class='ocaml-constant-language'>_</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>-&gt;</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>None</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>TypeOf</span><span class='ocaml-source'> </span><span class='ocaml-source'>t</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>-&gt;</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Some</span><span class='ocaml-source'> </span><span class='ocaml-source'>(</span><span class='ocaml-constant-language-capital-identifier'>TypeOf</span><span class='ocaml-source'> </span><span class='ocaml-source'>t</span><span class='ocaml-source'>)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>With</span><span class='ocaml-source'> </span><span class='ocaml-source'>{</span><span class='ocaml-source'> </span><span class='ocaml-source'>w_substitutions</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'> </span><span class='ocaml-source'>w_expr</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'> </span><span class='ocaml-constant-language'>_</span><span class='ocaml-source'> </span><span class='ocaml-source'>}</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>-&gt;</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Some</span><span class='ocaml-source'> </span><span class='ocaml-source'>(</span><span class='ocaml-constant-language-capital-identifier'>With</span><span class='ocaml-source'> </span><span class='ocaml-source'>(</span><span class='ocaml-source'>w_substitutions</span><span class='ocaml-keyword-other-ocaml punctuation-comma punctuation-separator'>,</span><span class='ocaml-source'> </span><span class='ocaml-source'>w_expr</span><span class='ocaml-source'>)</span><span class='ocaml-source'>)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>
</span><span class='ocaml-comment-doc'>(**</span><span class='ocaml-comment-doc'> Query the top-comment of a signature. This is [s.doc] most of the time with
</span><span class='ocaml-comment-doc'>    an exception for signature starting with an inline includes. </span><span class='ocaml-comment-doc'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-keyword'>let</span><span class='ocaml-source'> </span><span class='ocaml-entity-name-function-binding'>extract_signature_doc</span><span class='ocaml-source'> </span><span class='ocaml-source'>(</span><span class='ocaml-source'>s</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Signature</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>t</span><span class='ocaml-source'>)</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>match</span><span class='ocaml-source'> </span><span class='ocaml-source'>(</span><span class='ocaml-source'>s</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>doc</span><span class='ocaml-keyword-other-ocaml punctuation-comma punctuation-separator'>,</span><span class='ocaml-source'> </span><span class='ocaml-source'>s</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>items</span><span class='ocaml-source'>)</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other'>with</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-list'>[]</span><span class='ocaml-keyword-other-ocaml punctuation-comma punctuation-separator'>,</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-capital-identifier'>Include</span><span class='ocaml-source'> </span><span class='ocaml-source'>{</span><span class='ocaml-source'> </span><span class='ocaml-source'>expansion</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'> </span><span class='ocaml-source'>status</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>=</span><span class='ocaml-source'> </span><span class='ocaml-constant-language-polymorphic-variant'>`Inline</span><span class='ocaml-keyword-other-ocaml punctuation-separator-terminator punctuation-separator'>;</span><span class='ocaml-source'> </span><span class='ocaml-constant-language'>_</span><span class='ocaml-source'> </span><span class='ocaml-source'>}</span><span class='ocaml-source'> </span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-keyword-other-ocaml punctuation-other-colon punctuation'>:</span><span class='ocaml-source'> </span><span class='ocaml-constant-language'>_</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>-&gt;</span><span class='ocaml-source'>
</span><span class='ocaml-source'>      </span><span class='ocaml-comment-block'>(*</span><span class='ocaml-comment-block'> A signature that starts with an [@inline] include inherits the
</span><span class='ocaml-comment-block'>         top-comment from the expansion. This comment is not rendered for
</span><span class='ocaml-comment-block'>         [include] items. </span><span class='ocaml-comment-block'>*)</span><span class='ocaml-source'>
</span><span class='ocaml-source'>      </span><span class='ocaml-source'>expansion</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>content</span><span class='ocaml-keyword-other-ocaml punctuation-other-period punctuation-separator'>.</span><span class='ocaml-source'>doc</span><span class='ocaml-source'>
</span><span class='ocaml-source'>  </span><span class='ocaml-keyword-other'>|</span><span class='ocaml-source'> </span><span class='ocaml-source'>doc</span><span class='ocaml-keyword-other-ocaml punctuation-comma punctuation-separator'>,</span><span class='ocaml-source'> </span><span class='ocaml-constant-language'>_</span><span class='ocaml-source'> </span><span class='ocaml-keyword-operator'>-&gt;</span><span class='ocaml-source'> </span><span class='ocaml-source'>doc</span><span class='ocaml-source'>
</span></code></pre>
